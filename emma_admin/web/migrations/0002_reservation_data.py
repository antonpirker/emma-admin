# Generated by Django 3.2.8 on 2021-10-21 07:36

import csv
import datetime
from os import EX_TEMPFAIL
from types import CoroutineType

from dateutil import parser
from django.conf import settings
from django.db import migrations
from django.db.models.constraints import CheckConstraint
from django.db.utils import IntegrityError
from web.models import (BOOKING_STATUS_TO_SLUG, RATE_PLAN_TO_SLUG,
                        UNIT_GROUP_TO_SLUG)

FIRST_NAME = 0
LAST_NAME = 1
BIRTH_DATE = 2
NATIONALITY = 3
PREFERRED_LANGUAGE = 4
ADDRESS_LINE_1 = 5
ADDRESS_LINE_2 = 6
POSTAL_CODE = 7
CITY = 8
COUNTRY_CODE = 9
EMAIL = 10
PHONE = 11
COMMENT = 12
CUSTOMER_COMMENT = 13

UNIT_GROUP = 22
UNIT = 23
PROPERTY_CODE = 31

TRAVEL_PURPOSE = 14
ADULTS = 16
CHILDREN = 17
CHECKIN_DATE = 18
CHECKIN_TIME = 19
CHECKOUT_DATE = 20
CHECKOUT_TIME = 21
RATE_PLAN = 27
STATUS = 33
ARRIVAL = 35
DEPARTURE = 36


def load_reservation_data(apps, schema_editor):
    Customer = apps.get_model('web', 'Customer')
    Booking = apps.get_model('web', 'Booking')
    Unit = apps.get_model('web', 'Unit')

    with open(settings.DATA_DIR / 'reservation_report.csv', newline='') as csvfile:
        reservation_reader = csv.reader(csvfile, delimiter=';')
        next(reservation_reader)  # skip first row

        for row in reservation_reader:
            if not Customer.objects.filter(
                first_name=row[FIRST_NAME],
                last_name=row[LAST_NAME],
                birth_date=parser.parse(row[BIRTH_DATE]),
            ).exists():
                Customer.objects.create(
                    first_name=row[FIRST_NAME],
                    last_name=row[LAST_NAME],
                    birth_date=parser.parse(row[BIRTH_DATE]),
                    nationality=row[NATIONALITY],
                    preferred_language=row[PREFERRED_LANGUAGE],
                    address_line_1=row[ADDRESS_LINE_1],
                    address_line_2=row[ADDRESS_LINE_2],
                    postal_code=row[POSTAL_CODE],
                    city=row[CITY],
                    country_code=row[COUNTRY_CODE],
                    email=row[EMAIL],
                    phone=row[PHONE],
                    comment=row[COMMENT],
                    customer_comment=row[CUSTOMER_COMMENT],
                )

            if not Unit.objects.filter(unit=row[UNIT]).exists():
                Unit.objects.create(
                    property_code=row[PROPERTY_CODE],
                    unit_group=UNIT_GROUP_TO_SLUG[row[UNIT_GROUP]],
                    unit=row[UNIT],
                )

            Booking.objects.create(
                customer=Customer.objects.get(
                    first_name=row[FIRST_NAME], last_name=row[LAST_NAME], birth_date=parser.parse(row[BIRTH_DATE])),
                unit=Unit.objects.get(unit=row[UNIT]),
                adults=row[ADULTS],
                children=row[CHILDREN],
                arrival=parser.parse(row[ARRIVAL]),
                departure=parser.parse(row[DEPARTURE]),
                rate_plan=RATE_PLAN_TO_SLUG[row[RATE_PLAN]],
                status=BOOKING_STATUS_TO_SLUG[row[STATUS]],
                travel_purpose=row[TRAVEL_PURPOSE],
            )


class Migration(migrations.Migration):

    dependencies = [
        ('web', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_reservation_data,
                             reverse_code=migrations.RunPython.noop),
    ]
